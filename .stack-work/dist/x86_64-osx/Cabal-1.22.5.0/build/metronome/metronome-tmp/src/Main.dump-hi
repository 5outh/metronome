
==================== FINAL INTERFACE ====================
2016-05-17 00:30:16.291539 UTC

interface main@main:Main 7103
  interface hash: f26ca9a19b850eb64e5bc3eca521739d
  ABI hash: 15316d0c924ba0c8c8c017b14330d527
  export-list hash: 39219c1ba70074042e0653c3445fed7d
  orphan hash: 68614d0f5441c0e4dc54e9c7568ef531
  flag hash: 48fc622fd9461e192824f7559f04b54c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.afplay
  Main.bpmWait
  Main.cycleDo
  Main.cyclePlay
  Main.defaultConfig
  Main.delaySeconds
  Main.fileName
  Main.genSounds
  Main.ignoreFailures
  Main.main
  Main.metronome
  Main.printMetronome
  Main.realMetronome
  Main.say
  Main.sayMetronome
  Main.showText
  Main.timeCycle
  Main.toWord
  Main.Config{Main.Config Main.ands Main.bpm Main.time}
  Main.SoundMap
module dependencies:
package dependencies: StateVar-1.1.0.4@State_IOvB80WkYNkEizdt0JVpzy
                      ansi-terminal-0.6.2.3@ansit_BDlVdfJGo3VHCIHxPTNjH1
                      ansi-wl-pprint-0.6.7.3@ansiw_KTAhiPa3RNI09mbeoAwSSX
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      async-2.1.0@async_KuqnF1GrhHK5nNp6Zzm3jy base-4.8.2.0
                      base-orphans-0.5.4@baseo_0gFtKFBT26OGSKHmmdqdfx
                      bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      clock-0.7.2@clock_25jKxsKUfKCI5az98RdfRZ
                      comonad-4.2.7.2@comon_ElAx0Rjzx8E1yBgPLG9vo4
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      contravariant-1.4@contr_22YLlupq7YX6QkREpuVZLZ
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm
                      distributive-0.5.0.2@distr_55SIdsoyihS4jXBaaVvPQX
                      exceptions-0.8.2.1@excep_6lgwjdgwblY7rzh5s6SLd8
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m
                      foldl-1.2.0@foldl_DPPqN7P4kHXIzNVH4vk4Yz ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I
                      hostname-1.0@hostn_3HfIQy11Ojb2in3623bzR3 integer-gmp-1.0.0.0
                      managed-1.0.3@manag_6MuRKdkWXS06s3GtUdM110
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      optional-args-1.0.1@optio_0VdeSl4DaNhJtf55MER0zY
                      optparse-applicative-0.12.1.0@optpa_FpNJ7fLofFNEy3rK4ZnBoD
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      profunctors-5.2@profu_AYhGmZJowvVFcoLtEhpyqO
                      semigroups-0.18.1@semig_Iivsiy35cmk8ISqG11MEap
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      system-filepath-0.4.13.4@syste_0e3pMPmZzix21iFp2U03Lc
                      system-fileio-0.3.16.3@syste_4TDp3THj8U86nw3l0Qe8pl
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6 template-haskell-2.10.0.0
                      temporary-1.2.0.4@tempo_BB1jAnqKRa22P4wRjGPqkp
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      turtle-1.2.7@turtl_IZSlFd6cYF2557raQ4sLnh
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unordered-containers-0.2.7.0@unord_2BLx4faR35mFWLJj5xiBgm
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         base-orphans-0.5.4@baseo_0gFtKFBT26OGSKHmmdqdfx:Data.Orphans
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         system-filepath-0.4.13.4@syste_0e3pMPmZzix21iFp2U03Lc:Filesystem.Path
         system-filepath-0.4.13.4@syste_0e3pMPmZzix21iFp2U03Lc:Filesystem.Path.CurrentOS
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics base-4.8.2.0:GHC.TypeLits
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Biff
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Clown
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Joker
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Product
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Sum
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Tannen
                         clock-0.7.2@clock_25jKxsKUfKCI5az98RdfRZ:System.Clock
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         semigroups-0.18.1@semig_Iivsiy35cmk8ISqG11MEap:Data.List.NonEmpty
                         semigroups-0.18.1@semig_Iivsiy35cmk8ISqG11MEap:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.0@unord_2BLx4faR35mFWLJj5xiBgm:Data.HashMap.Base
                         unordered-containers-0.2.7.0@unord_2BLx4faR35mFWLJj5xiBgm:Data.HashSet
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Concurrent 1268fba2c60b0505ec9e8731d08a8e75
import  -/  base-4.8.2.0:Control.Exception e9090e246fba030faecf7b81b3e8e320
import  -/  base-4.8.2.0:Control.Exception.Base b99410eaf0cc6bb119b1d45a497c1b10
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Monoid 85b292b52bfd80ed619cddb767d638d3
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Conc.IO 68e50d4dc5045afabc0a9ccdf46c73fc
import  -/  base-4.8.2.0:GHC.Conc.Sync e56817ef33471434aa51ef212cff6db1
import  -/  base-4.8.2.0:GHC.Exception 18c46fe9c5c0c3a120035f264ef32d41
import  -/  base-4.8.2.0:GHC.IO.Exception e38c1261b70caecb7af416b94c82c925
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO e7c9ddd0b9319c17e6733109efa94847
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 8b0bee2cbf19008d0429e93c882cbe4e
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text 455542f1de38979f085463a75ea8fadc
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.IO 6c4df61eb5e9f42a1a3e4136e35df50b
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal d9b6b9a9dd535595b612aea5738b7466
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.IO.Class 37487179a2f5eb2ea7922b911abcae56
import  -/  turtle-1.2.7@turtl_IZSlFd6cYF2557raQ4sLnh:Turtle dd96dc67c5cfa91e556000d0a7404e99
import  -/  turtle-1.2.7@turtl_IZSlFd6cYF2557raQ4sLnh:Turtle.Prelude 6cf56099388fafc6569e119c6cff13aa
ad1eed71f47ce7a00771d225ddb5dcba
  $fEqConfig :: GHC.Classes.Eq Main.Config
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Config Main.$fEqConfig_$c== Main.$fEqConfig_$c/= -}
ad1eed71f47ce7a00771d225ddb5dcba
  $fEqConfig_$c/= :: Main.Config -> Main.Config -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LS),1*U(U(1*U(U),1*U(U)),U,U)><S(S(SL)LS),1*U(U(1*U(U),1*U(U)),U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a4 :: Main.Config b :: Main.Config ->
                 case Main.$fEqConfig_$c== a4 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ad1eed71f47ce7a00771d225ddb5dcba
  $fEqConfig_$c== :: Main.Config -> Main.Config -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LS),1*U(U(1*U(U),1*U(U)),U,U)><S(S(SL)LS),1*U(U(1*U(U),1*U(U)),U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Main.Config w1 :: Main.Config ->
                 case w of ww { Main.Config ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.I# ww8 ->
                 case w1 of ww9 { Main.Config ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.I# ww17 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww8 ww17) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww6 of wild1 { GHC.Types.I# x ->
                      case ww15 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 ww11) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww3 of wild5 {
                                  GHC.Types.False
                                  -> case ww12 of wild6 {
                                       GHC.Types.False -> GHC.Types.True
                                       GHC.Types.True -> GHC.Types.False }
                                  GHC.Types.True -> ww12 } } } } } } } } } } } }) -}
ad1eed71f47ce7a00771d225ddb5dcba
  $fShowConfig :: GHC.Show.Show Main.Config
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Config
                  Main.$fShowConfig_$cshowsPrec
                  Main.$fShowConfig_$cshow
                  Main.$fShowConfig_$cshowList -}
ad1eed71f47ce7a00771d225ddb5dcba
  $fShowConfig1 :: Main.Config -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.Config w1 :: GHC.Base.String ->
                 case w of ww { Main.Config ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 Main.$w$cshowsPrec 0 ww5 ww6 ww2 ww3 w1 } }) -}
faefe0f1c4ceb26379021d0651397588
  $fShowConfig2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
d39a4f8acd11393579a647f34eb5396f
  $fShowConfig3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ands = "#) -}
7abcc343f7f09955b02ae9a04783fe7e
  $fShowConfig4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bpm = "#) -}
b7d4cc7e337c452035cda7ac30b51f8d
  $fShowConfig5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
aab70f3d91cd25e16022b5e418b0b1a7
  $fShowConfig6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "time = "#) -}
8ed1d76c49efef9515521c65bc382c0e
  $fShowConfig7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Config {"#) -}
ad1eed71f47ce7a00771d225ddb5dcba
  $fShowConfig_$cshow :: Main.Config -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SLS),1*U(U(1*U(U),U(U)),U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Main.Config ->
                 Main.$fShowConfig_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ad1eed71f47ce7a00771d225ddb5dcba
  $fShowConfig_$cshowList :: [Main.Config] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Config
                   Main.$fShowConfig1) -}
ad1eed71f47ce7a00771d225ddb5dcba
  $fShowConfig_$cshowsPrec ::
    GHC.Types.Int -> Main.Config -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S(SLS),1*U(U(1*U(U),U(U)),U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.Config w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Config ww3 ww4 ww5 ->
                 case ww3 of ww6 { (,) ww7 ww8 ->
                 Main.$w$cshowsPrec ww1 ww7 ww8 ww4 ww5 w2 } } }) -}
ce03c71ec897ecef1adbb329225f66af
  $s$fShow[]2 :: [Data.Text.Internal.Text] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [Data.Text.Internal.Text] ->
                 GHC.Show.showList__
                   @ Data.Text.Internal.Text
                   Data.Text.Show.$fShowText1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b6cc868c80cbb2bd30eb728e7ccf48ea
  $sfromList ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Base.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a4 ds :: [(Data.Text.Internal.Text, a4)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Data.Text.Internal.Text @ a4
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Base.Bin
                             @ Data.Text.Internal.Text
                             @ a4
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a4)
                             (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a4) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Main.$sfromList1
                                  @ a4
                                  (Data.Map.Base.Bin
                                     @ Data.Text.Internal.Text
                                     @ a4
                                     1
                                     ww
                                     x
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a4)
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a4))
                                  wild2
                             GHC.Types.LT
                             -> Main.$wpoly_go10
                                  @ a4
                                  1
                                  (Data.Map.Base.Bin
                                     @ Data.Text.Internal.Text
                                     @ a4
                                     1
                                     ww
                                     x
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a4)
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a4))
                                  wild2 } } } } } } }) -}
c472bfaf97dac30484056cc8d10ed6cd
  $sfromList1 ::
    Data.Map.Base.Map Data.Text.Internal.Text a1
    -> [(Data.Text.Internal.Text, a1)]
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
45550d2efe77c03898cd4b137eb9a919
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 6, Strictness: <L,U><L,1*U(U)><L,U(U)><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Types.Int
                   ww2 :: GHC.Types.Int
                   ww3 :: GHC.Prim.Int#
                   ww4 :: GHC.Types.Bool
                   w :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowConfig7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowConfig6
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (case ww1 of ww5 { GHC.Types.I# ww6 ->
                              case GHC.Show.$wshowSignedInt
                                     0
                                     ww6
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__1
                                        (GHC.Show.$fShow(,)_$sgo
                                           (\ w2 :: GHC.Base.String ->
                                            case ww2 of ww7 { GHC.Types.I# ww8 ->
                                            case GHC.Show.$wshowSignedInt
                                                   0
                                                   ww8
                                                   w2 of ww9 { (#,#) ww10 ww11 ->
                                            GHC.Types.: @ GHC.Types.Char ww10 ww11 } })
                                           (GHC.Types.[] @ GHC.Show.ShowS)
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.shows8
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 Main.$fShowConfig5
                                                 (GHC.Base.++
                                                    @ GHC.Types.Char
                                                    Main.$fShowConfig4
                                                    (case GHC.Show.$wshowSignedInt
                                                            0
                                                            ww3
                                                            (GHC.Base.++
                                                               @ GHC.Types.Char
                                                               Main.$fShowConfig5
                                                               (GHC.Base.++
                                                                  @ GHC.Types.Char
                                                                  Main.$fShowConfig3
                                                                  (case ww4 of wild {
                                                                     GHC.Types.False
                                                                     -> GHC.Base.++
                                                                          @ GHC.Types.Char
                                                                          GHC.Show.shows17
                                                                          (GHC.Base.++
                                                                             @ GHC.Types.Char
                                                                             Main.$fShowConfig2
                                                                             x)
                                                                     GHC.Types.True
                                                                     -> GHC.Base.++
                                                                          @ GHC.Types.Char
                                                                          GHC.Show.shows16
                                                                          (GHC.Base.++
                                                                             @ GHC.Types.Char
                                                                             Main.$fShowConfig2
                                                                             x) }))) of ww7 { (#,#) ww8 ww9 ->
                                                     GHC.Types.:
                                                       @ GHC.Types.Char
                                                       ww8
                                                       ww9 })))))) of ww7 { (#,#) ww8 ww9 ->
                              GHC.Types.: @ GHC.Types.Char ww8 ww9 } })))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)) }) -}
8d43779271eb25023bbec70c72e47aef
  $w$sgo10 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
f59f7c0e43ee9d0cee03730093f1fa68
  $wa ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
    -> [Data.Text.Internal.Text]
    -> Main.SoundMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <S,1*H><L,U><S,1*H><S,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: (GHC.Types.Int, GHC.Types.Int)
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Types.Bool
                   w :: [Data.Text.Internal.Text]
                   w1 :: Main.SoundMap
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of wild {
                   []
                   -> case GHC.List.cycle1
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : ipv ipv1
                   -> letrec {
                        xs' :: [Data.Text.Internal.Text]
                        = GHC.Base.++ @ Data.Text.Internal.Text wild xs'
                      } in
                      let {
                        lvl13 :: GHC.Types.Double
                        = case GHC.Prim./##
                                 60.0
                                 (GHC.Prim.int2Double# ww1) of wild2 { DEFAULT ->
                          GHC.Types.D# wild2 }
                      } in
                      letrec {
                        a4 :: [Data.Text.Internal.Text]
                              -> GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          {- Arity: 2, Strictness: <S,1*U><L,U> -}
                        = \ ds :: [Data.Text.Internal.Text]
                            eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          case ds of wild1 {
                            [] -> (# eta, GHC.Tuple.() #)
                            : y ys
                            -> case y of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                               case Main.$wpoly_go1
                                      @ Data.Text.Internal.Text
                                      ww4
                                      ww5
                                      ww6
                                      w1 of wild2 {
                                 GHC.Base.Nothing
                                 -> case Main.cyclePlay2
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    of {}
                                 GHC.Base.Just sound_
                                 -> case GHC.Prim.fork#
                                           @ (GHC.Types.IO ())
                                           (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                            GHC.Prim.catch#
                                              @ ()
                                              @ GHC.Exception.SomeException
                                              (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                               case (Turtle.Prelude.proc
                                                       @ GHC.Types.IO
                                                       Control.Monad.IO.Class.$fMonadIOIO
                                                       Main.afplay1
                                                       (GHC.Types.:
                                                          @ Data.Text.Internal.Text
                                                          sound_
                                                          (GHC.Types.[] @ Data.Text.Internal.Text))
                                                       (Turtle.Shell.$fAlternativeShell5
                                                          @ Data.Text.Internal.Text)
                                                         `cast`
                                                       (Trans
                                                            (forall r.
                                                             <Control.Foldl.FoldM
                                                                GHC.Types.IO
                                                                Data.Text.Internal.Text
                                                                r>_R
                                                             ->_R Sym (GHC.Types.NTCo:IO[0] <r>_R))
                                                            (Sym (Turtle.Shell.NTCo:Shell[0]
                                                                      <Data.Text.Internal.Text>_R))))
                                                      `cast`
                                                    (GHC.Types.NTCo:IO[0]
                                                         <GHC.IO.Exception.ExitCode>_R)
                                                      s of ds1 { (#,#) ipv2 ipv3 ->
                                               (# ipv2, GHC.Tuple.() #) })
                                              GHC.Conc.Sync.childHandler1
                                              eta1)
                                             `cast`
                                           (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                           eta of ds1 { (#,#) ipv2 ipv3 ->
                                    case Main.bpmWait3
                                           @ GHC.Types.Double
                                           GHC.Float.$fRealFracDouble
                                           lvl13
                                           ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.killThread#
                                           @ GHC.Exception.SomeException
                                           ipv3
                                           Main.bpmWait2
                                           ipv4 of s1 { DEFAULT ->
                                    a4 ys s1 } } } } } }
                      } in
                      a4 xs' w2 }) -}
f0055a2d59612c18d47e2715c085952f
  $wa1 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
    -> [Data.Text.Internal.Text]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.SoundMap #)
  {- Arity: 5, Strictness: <S,H><L,U><S,U><L,U><L,U>, Inline: [0] -}
1d6ffdfe19d56f71651ca16a182ff1ac
  $wa2 ::
    (Data.Text.Internal.Text -> GHC.Types.IO a)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,C(C1(U(U,A)))><L,U><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a4
                   w :: Data.Text.Internal.Text -> GHC.Types.IO a4
                   ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Types.Bool
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   lvl13 :: GHC.Types.Double
                   = case ww2 of wild {
                       GHC.Types.False
                       -> case GHC.Prim./##
                                 60.0
                                 (GHC.Prim.int2Double# ww1) of wild2 { DEFAULT ->
                          GHC.Types.D# wild2 }
                       GHC.Types.True
                       -> case GHC.Prim./##
                                 60.0
                                 (GHC.Prim.int2Double# (GHC.Prim.*# ww1 2)) of wild2 { DEFAULT ->
                          GHC.Types.D# wild2 } }
                 } in
                 letrec {
                   a5 :: [Data.Text.Internal.Text]
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ ds :: [Data.Text.Internal.Text]
                       eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                     case ds of wild {
                       [] -> (# eta, GHC.Tuple.() #)
                       : y ys
                       -> case GHC.Prim.fork#
                                 @ (GHC.Types.IO ())
                                 (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                  GHC.Prim.catch#
                                    @ ()
                                    @ GHC.Exception.SomeException
                                    (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                     case (w y) `cast` (GHC.Types.NTCo:IO[0] <a4>_R)
                                            s of ds1 { (#,#) ipv ipv1 ->
                                     (# ipv, GHC.Tuple.() #) })
                                    GHC.Conc.Sync.childHandler1
                                    eta1)
                                   `cast`
                                 (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                 eta of ds1 { (#,#) ipv ipv1 ->
                          case Main.bpmWait3
                                 @ GHC.Types.Double
                                 GHC.Float.$fRealFracDouble
                                 lvl13
                                 ipv of ds2 { (#,#) ipv2 ipv3 ->
                          case GHC.Prim.killThread#
                                 @ GHC.Exception.SomeException
                                 ipv1
                                 Main.bpmWait2
                                 ipv2 of s1 { DEFAULT ->
                          a5 ys s1 } } } }
                 } in
                 a5 (Main.$wtimeCycle ww ww2) w1) -}
ea59f307989fff56316c03a6d5dcc16e
  $wa3 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Types.Int
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Types.Bool
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   words_ :: [Data.Text.Internal.Text]
                   = case ww of ww3 { GHC.Types.I# ww4 -> Main.$wtimeCycle ww4 ww2 }
                 } in
                 let {
                   ds :: (GHC.Types.Int, GHC.Types.Int) = (ww, Main.main2)
                 } in
                 case Main.$wa1 ds ww1 ww2 words_ w of ds1 { (#,#) ipv ipv1 ->
                 case ww2 of wild {
                   GHC.Types.False -> Main.$wa ds ww1 GHC.Types.False words_ ipv1 ipv
                   GHC.Types.True
                   -> Main.$wa
                        ds
                        (GHC.Prim.*# ww1 2)
                        GHC.Types.True
                        words_
                        ipv1
                        ipv } }) -}
ef9e5605deb123cea6299c1b5f8b6bb2
  $wfileName ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
  {- Arity: 4, Strictness: <S,1*H><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: (GHC.Types.Int, GHC.Types.Int)
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Types.Bool
                   w :: Data.Text.Internal.Text ->
                 Data.Text.concat
                   (GHC.Types.:
                      @ Data.Text.Internal.Text
                      Main.fileName6
                      (GHC.Types.:
                         @ Data.Text.Internal.Text
                         w
                         (GHC.Types.:
                            @ Data.Text.Internal.Text
                            Main.fileName5
                            (GHC.Types.:
                               @ Data.Text.Internal.Text
                               (case GHC.Show.$wshowSignedInt
                                       0
                                       ww1
                                       (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                GHC.ST.runSTRep
                                  @ Data.Text.Internal.Text
                                  (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                                   case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                                   Main.fileName4
                                     @ s1
                                     (Data.Text.Array.MArray @ s1 ipv1)
                                     Main.defaultConfig2
                                     (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                     0
                                     ipv }) })
                               (GHC.Types.:
                                  @ Data.Text.Internal.Text
                                  (case ww2 of wild {
                                     GHC.Types.False -> Data.Text.Internal.empty_
                                     GHC.Types.True -> Main.fileName3 })
                                  Main.fileName1)))))) -}
aff78d0c34c1f2128eb2f3060fbb2acf
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map Data.Text.Internal.Text a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
f20bf45c8022b12474df5a657fb60c09
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Base.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
7328687298f6c3a03e94c51aa81ea955
  $wtimeCycle ::
    GHC.Prim.Int# -> GHC.Types.Bool -> [Data.Text.Internal.Text]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: GHC.Types.Bool ->
                 let {
                   a4 :: [Data.Text.Internal.Text]
                   = case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.># 1 ww) of wild {
                       GHC.Types.False
                       -> letrec {
                            go :: GHC.Prim.Int# -> [Data.Text.Internal.Text]
                              {- Arity: 1, Strictness: <L,U> -}
                            = \ x :: GHC.Prim.Int# ->
                              GHC.Types.:
                                @ Data.Text.Internal.Text
                                (Main.$wtoWord x)
                                (case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.==# x ww) of wild1 {
                                   GHC.Types.False -> go (GHC.Prim.+# x 1)
                                   GHC.Types.True -> GHC.Types.[] @ Data.Text.Internal.Text })
                          } in
                          go 1
                       GHC.Types.True -> GHC.Types.[] @ Data.Text.Internal.Text }
                 } in
                 case w of wild {
                   GHC.Types.False -> a4
                   GHC.Types.True
                   -> case a4 of wild1 {
                        [] -> Main.main4
                        : x xs
                        -> GHC.Base.++
                             @ Data.Text.Internal.Text
                             (GHC.Types.:
                                @ Data.Text.Internal.Text
                                x
                                (Data.OldList.prependToAll
                                   @ Data.Text.Internal.Text
                                   Main.main3
                                   xs))
                             Main.main4 } }) -}
fe91c4ec6acde38ce23371f7ef6eacfc
  $wtoWord :: GHC.Prim.Int# -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case ww of ds {
                   DEFAULT
                   -> case GHC.Show.$wshowSignedInt
                             0
                             ds
                             (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                      GHC.ST.runSTRep
                        @ Data.Text.Internal.Text
                        (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                         case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                         Main.main8
                           @ s1
                           (Data.Text.Array.MArray @ s1 ipv1)
                           Main.defaultConfig2
                           (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                           0
                           ipv }) }
                   7 -> Main.main7
                   11 -> Main.main6
                   13 -> Main.main5 }) -}
ad1eed71f47ce7a00771d225ddb5dcba
  data Config
    = Config {time :: !(GHC.Types.Int, GHC.Types.Int),
              bpm :: {-# UNPACK #-}GHC.Types.Int,
              ands :: !GHC.Types.Bool}
7f5389ea677ebaf4cd37ed4b0e9f1ba8
  type SoundMap =
    Data.Map.Base.Map Data.Text.Internal.Text Data.Text.Internal.Text
a01b3a50e257b1ae5c9e2b35685ddff9
  afplay ::
    Control.Monad.IO.Class.MonadIO io =>
    Data.Text.Internal.Text -> io GHC.IO.Exception.ExitCode
  {- Arity: 2, Strictness: <L,U(A,C(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (io :: * -> *)
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO io
                   file :: Data.Text.Internal.Text ->
                 Turtle.Prelude.proc
                   @ io
                   $dMonadIO
                   Main.afplay1
                   (GHC.Types.:
                      @ Data.Text.Internal.Text
                      file
                      (GHC.Types.[] @ Data.Text.Internal.Text))
                   (Turtle.Shell.$fAlternativeShell5 @ Data.Text.Internal.Text)
                     `cast`
                   (Trans
                        (forall r.
                         <Control.Foldl.FoldM GHC.Types.IO Data.Text.Internal.Text r>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <r>_R))
                        (Sym (Turtle.Shell.NTCo:Shell[0] <Data.Text.Internal.Text>_R)))) -}
4a4d435032fc2070fa39e187ddba927b
  afplay1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "afplay"#) -}
6c94202ade30a96b4ef22f30409b747d
  ands :: Main.Config -> GHC.Types.Bool
  RecSel Main.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLS),1*U(1*H,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Config ->
                 case ds of wild { Main.Config ds1 dt ds2 -> ds2 }) -}
721f64d916b1ea582a799427476524bc
  bpm :: Main.Config -> GHC.Types.Int
  RecSel Main.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLS),1*U(1*H,U,1*H)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Config ->
                 case ds of wild { Main.Config ds1 dt ds2 -> GHC.Types.I# dt }) -}
90c12a459ee9c19786a4840c8c7e8ab6
  bpmWait :: GHC.Types.Int -> GHC.Types.IO a -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U(U)><L,C(U(U,A))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.bpmWait1
                  `cast`
                (forall a4.
                 <GHC.Types.Int>_R
                 ->_R <GHC.Types.IO a4>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
daac97dd9e107c89ee8482c36bf34298
  bpmWait1 ::
    GHC.Types.Int
    -> GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,C(U(U,A))><L,U>,
     Unfolding: (\ @ a4
                   bpm_ :: GHC.Types.Int
                   io :: GHC.Types.IO a4
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.fork#
                        @ (GHC.Types.IO ())
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         GHC.Prim.catch#
                           @ ()
                           @ GHC.Exception.SomeException
                           (\ s1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                            case io `cast` (GHC.Types.NTCo:IO[0] <a4>_R)
                                   s1 of ds { (#,#) ipv ipv1 ->
                            (# ipv, GHC.Tuple.() #) })
                           GHC.Conc.Sync.childHandler1
                           eta)
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s of ds { (#,#) ipv ipv1 ->
                 case Main.bpmWait3
                        @ GHC.Types.Double
                        GHC.Float.$fRealFracDouble
                        (case bpm_ of wild { GHC.Types.I# i ->
                         case GHC.Prim./##
                                60.0
                                (GHC.Prim.int2Double# i) of wild2 { DEFAULT ->
                         GHC.Types.D# wild2 } })
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.killThread#
                        @ GHC.Exception.SomeException
                        ipv1
                        Main.bpmWait2
                        ipv2 of s1 { DEFAULT ->
                 (# s1, GHC.Tuple.() #) } } }) -}
39c393dfb6687ff85b6d14fa79e48319
  bpmWait2 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionAsyncException_$ctoException
                   GHC.IO.Exception.ThreadKilled) -}
6c27768a83195bdd629f57e0b9fd7065
  bpmWait3 ::
    GHC.Real.RealFrac n =>
    n
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(A,1*U,A,A,1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: (\ @ n
                   $dRealFrac :: GHC.Real.RealFrac n
                   eta :: n
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case {__pkg_ccall base-4.8.2.0 rtsSupportsBoundThreads GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                        -> (# GHC.Prim.State#
                                                                                GHC.Prim.RealWorld,
                                                                              GHC.Prim.Int# #)}
                        GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                 let {
                   time1 :: GHC.Types.Int
                   = GHC.Real.round
                       @ n
                       $dRealFrac
                       @ GHC.Types.Int
                       GHC.Real.$fIntegralInt
                       (let {
                          $dFractional :: GHC.Real.Fractional n
                          = GHC.Real.$p2RealFrac @ n $dRealFrac
                        } in
                        let {
                          $dNum :: GHC.Num.Num n = GHC.Real.$p1Fractional @ n $dFractional
                        } in
                        GHC.Num.*
                          @ n
                          $dNum
                          (GHC.Num.fromInteger @ n $dNum Main.bpmWait4)
                          eta)
                 } in
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Event.Thread.threadDelay1 time1 eta1
                   0
                   -> case time1 of wild2 { GHC.Types.I# time# ->
                      case GHC.Prim.delay#
                             @ GHC.Prim.RealWorld
                             time#
                             eta1 of s' { DEFAULT ->
                      (# s', GHC.Tuple.() #) } } } }) -}
5b2a34325eb03756e7288232aae688cc
  bpmWait4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 1000000) -}
dd3c88919e2917750063e2dda39008a1
  cycleDo :: [GHC.Types.IO a] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.cycleDo1
                  `cast`
                (forall a4.
                 <[GHC.Types.IO a4]>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e0b0d6cef1b54f5ecc08bdd0261bad00
  cycleDo1 ::
    [GHC.Types.IO a]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ a4
                   x :: [GHC.Types.IO a4]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case x of wild {
                   []
                   -> case GHC.List.cycle1
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : ipv ipv1
                   -> letrec {
                        xs' :: [GHC.Types.IO a4] = GHC.Base.++ @ (GHC.Types.IO a4) wild xs'
                      } in
                      Main.cycleDo2 @ a4 xs' eta }) -}
471e8c3d7323081ea4f66bf3ce842b76
  cycleDo2 ::
    [GHC.Types.IO a]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
b0db314b8c9a6365dd67b1af77ef4b4c
  cyclePlay ::
    Main.Config
    -> [Data.Text.Internal.Text] -> Main.SoundMap -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <S(SLS),1*U(1*H,U,1*H)><S,1*U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.cyclePlay1
                  `cast`
                (<Main.Config>_R
                 ->_R <[Data.Text.Internal.Text]>_R
                 ->_R <Main.SoundMap>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
786e01d6ae31578a3a8e926cb6cd6a4c
  cyclePlay1 ::
    Main.Config
    -> [Data.Text.Internal.Text]
    -> Main.SoundMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S(SLS),1*U(1*H,U,1*H)><S,1*U><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Main.Config
                   w1 :: [Data.Text.Internal.Text]
                   w2 :: Main.SoundMap
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Main.Config ww1 ww2 ww3 ->
                 Main.$wa ww1 ww2 ww3 w1 w2 w3 }) -}
4e2fbaa76904805142e47ae660ed6d0f
  cyclePlay2 :: GHC.Types.IO ()
  {- Strictness: b -}
c02898002f5860fac4dd06fe1773141f
  defaultConfig :: Main.Config
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Config Main.defaultConfig1 120 GHC.Types.True) -}
f64b4c5f6f3c888879202fca2bed404f
  defaultConfig1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.defaultConfig2, Main.defaultConfig2)) -}
e950a3c35270b4ad84002e324b8dd684
  defaultConfig2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4) -}
3bcd55ff95fc19900d0db8c2ac220761
  delaySeconds :: GHC.Real.RealFrac n => n -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,U(A,1*U,A,A,1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.bpmWait3
                  `cast`
                (forall n.
                 <GHC.Real.RealFrac n>_R
                 ->_R <n>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
373d1553a48b0bbd0873835ff11d35f0
  fileName ::
    Main.Config -> Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S(SLS),1*U(1*H,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Main.Config w1 :: Data.Text.Internal.Text ->
                 case w of ww { Main.Config ww1 ww2 ww3 ->
                 Main.$wfileName ww1 ww2 ww3 w1 }) -}
9b459620b50395791e0850542ad3b408
  fileName1 :: [Data.Text.Internal.Text]
  {- Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.fileName2
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
205c738e3c6008a59a090ed6a08c5319
  fileName2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".aiff"#) -}
273ee6a9368b1e884364ec91d953a83f
  fileName3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "-ands"#) -}
a2da80b4d0df71058978840dfaafa2fd
  fileName4 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
aafe52fdd1de7061422f0258ee992aa5
  fileName5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "-"#) -}
7ba4ae0309ebd33fd344c18a66073075
  fileName6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "/tmp/.sounds/"#) -}
49c890e7a71a4724a941c70ea4ac743a
  genSounds ::
    Main.Config
    -> [Data.Text.Internal.Text] -> GHC.Types.IO Main.SoundMap
  {- Arity: 3, Strictness: <S(SLS),1*U(H,U,U)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.genSounds1
                  `cast`
                (<Main.Config>_R
                 ->_R <[Data.Text.Internal.Text]>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Main.SoundMap>_R)) -}
c7031a9a2cb579b51920acb5cd22e32c
  genSounds1 ::
    Main.Config
    -> [Data.Text.Internal.Text]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.SoundMap #)
  {- Arity: 3, Strictness: <S(SLS),1*U(H,U,U)><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Main.Config
                   w1 :: [Data.Text.Internal.Text]
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Main.Config ww1 ww2 ww3 ->
                 Main.$wa1 ww1 ww2 ww3 w1 w2 }) -}
5e674362a80aa3bb26422135d530a65d
  ignoreFailures :: GHC.Types.IO () -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.ignoreFailures1
                  `cast`
                (<GHC.Types.IO ()>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
5bc598bbbd0a0f30b2108a3b8886eac4
  ignoreFailures1 ::
    GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ io :: GHC.Types.IO ()
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.Prim.catch#
                   @ ()
                   @ GHC.Exception.SomeException
                   io `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                   (\ e1 :: GHC.Exception.SomeException[OneShot]
                      eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    (# eta1, GHC.Tuple.() #))
                   eta) -}
2adb45eb54d8cee6cb2ef63c81ded723
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
2e53bbb94ca1703b24bfa2782f30ba3f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   words_ :: [Data.Text.Internal.Text]
                   = Main.$wtimeCycle 4 GHC.Types.True
                 } in
                 let {
                   ds :: (GHC.Types.Int, GHC.Types.Int)
                   = (Main.defaultConfig2, Main.main2)
                 } in
                 case Main.$wa1
                        ds
                        120
                        GHC.Types.True
                        words_
                        w of ds1 { (#,#) ipv ipv1 ->
                 Main.$wa ds 240 GHC.Types.True words_ ipv1 ipv }) -}
cad3727454606f0e4c3374aa97e72065
  main2 :: GHC.Types.Int
  {- Strictness: b -}
ea1436bfe1ef2e47668eeaad0f1e36b3
  main3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "n"#) -}
abcedf089960e6f8c3ee06ff6791bb2a
  main4 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.main3
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
4b5df7a9355efb433834d75d3b617848
  main5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "thirt"#) -}
20e93f85c44c37a95ea1512bad8b0b53
  main6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "lev"#) -}
a4b1db1fdda5d8771cf77782e1b11bc3
  main7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "sev"#) -}
5d076ee535fb3160aa437d58ab1942d0
  main8 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
3101eea1a53a7c06e4bc3e588a35d620
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
f71de70de6bcfb73741d13d6c0b7a671
  metronome ::
    (Data.Text.Internal.Text -> GHC.Types.IO a)
    -> Main.Config -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,C(C1(U(U,A)))><S(S(SL)LS),1*U(U(1*U(U),A),U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.metronome1
                  `cast`
                (forall a4.
                 <Data.Text.Internal.Text -> GHC.Types.IO a4>_R
                 ->_R <Main.Config>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
9e35007fd25734e66b0dab3d9dcc331b
  metronome1 ::
    (Data.Text.Internal.Text -> GHC.Types.IO a)
    -> Main.Config
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,C(C1(U(U,A)))><S(S(SL)LS),1*U(U(1*U(U),A),U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a4
                   w :: Data.Text.Internal.Text -> GHC.Types.IO a4
                   w1 :: Main.Config
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Main.Config ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.I# ww8 ->
                 Main.$wa2 @ a4 w ww8 ww2 ww3 w2 } } }) -}
86030dc26b7891acd91ed68d2421ce47
  printMetronome :: Main.Config -> GHC.Types.IO ()
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                Main.printMetronome1
                  `cast`
                (<Main.Config>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
34f71638767138fd08a81560f58ecce8
  printMetronome1 ::
    Main.Config
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Unfolding: (\ w :: Main.Config
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Main.Config ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.I# ww8 ->
                 let {
                   lvl13 :: GHC.Types.Double
                   = case ww3 of wild {
                       GHC.Types.False
                       -> case GHC.Prim./##
                                 60.0
                                 (GHC.Prim.int2Double# ww2) of wild2 { DEFAULT ->
                          GHC.Types.D# wild2 }
                       GHC.Types.True
                       -> case GHC.Prim./##
                                 60.0
                                 (GHC.Prim.int2Double# (GHC.Prim.*# ww2 2)) of wild2 { DEFAULT ->
                          GHC.Types.D# wild2 } }
                 } in
                 letrec {
                   a4 :: [Data.Text.Internal.Text]
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ ds :: [Data.Text.Internal.Text]
                       eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                     case ds of wild {
                       [] -> (# eta, GHC.Tuple.() #)
                       : y ys
                       -> case GHC.Prim.fork#
                                 @ (GHC.Types.IO ())
                                 (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                  GHC.Prim.catch#
                                    @ ()
                                    @ GHC.Exception.SomeException
                                    (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                     case Data.Text.IO.appendFile2
                                            GHC.IO.Handle.FD.stdout
                                            y
                                            s of ds1 { (#,#) ipv ipv1 ->
                                     case GHC.IO.Handle.Text.$wa6
                                            GHC.IO.Handle.FD.stdout
                                            '\n'
                                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                                     (# ipv2, GHC.Tuple.() #) } })
                                    GHC.Conc.Sync.childHandler1
                                    eta1)
                                   `cast`
                                 (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                 eta of ds1 { (#,#) ipv ipv1 ->
                          case Main.bpmWait3
                                 @ GHC.Types.Double
                                 GHC.Float.$fRealFracDouble
                                 lvl13
                                 ipv of ds2 { (#,#) ipv2 ipv3 ->
                          case GHC.Prim.killThread#
                                 @ GHC.Exception.SomeException
                                 ipv1
                                 Main.bpmWait2
                                 ipv2 of s1 { DEFAULT ->
                          a4 ys s1 } } } }
                 } in
                 a4 (Main.$wtimeCycle ww8 ww3) w1 } } }) -}
ea0e48264af6c1f914d9e7f1396ac011
  realMetronome :: Main.Config -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(SLS),1*U(U(1*U(U),A),U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.realMetronome1
                  `cast`
                (<Main.Config>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
fbf8b2822ecf09bacb46a2dea68057ad
  realMetronome1 ::
    Main.Config
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(SLS),1*U(U(1*U(U),A),U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Main.Config
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Main.Config ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 -> Main.$wa3 ww5 ww2 ww3 w1 } }) -}
50f7e26c1b345932c67e9b0b615bbf6f
  say ::
    Control.Monad.IO.Class.MonadIO io =>
    [Data.Text.Internal.Text]
    -> Data.Text.Internal.Text -> io GHC.IO.Exception.ExitCode
  {- Arity: 3, Strictness: <L,U(A,C(U))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (io :: * -> *)
                   $dMonadIO :: Control.Monad.IO.Class.MonadIO io
                   args :: [Data.Text.Internal.Text]
                   word :: Data.Text.Internal.Text ->
                 Turtle.Prelude.proc
                   @ io
                   $dMonadIO
                   Main.say1
                   (GHC.Types.: @ Data.Text.Internal.Text word args)
                   (Turtle.Shell.$fAlternativeShell5 @ Data.Text.Internal.Text)
                     `cast`
                   (Trans
                        (forall r.
                         <Control.Foldl.FoldM GHC.Types.IO Data.Text.Internal.Text r>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <r>_R))
                        (Sym (Turtle.Shell.NTCo:Shell[0] <Data.Text.Internal.Text>_R)))) -}
b9879bb1580c81ceddeb61a119954ed8
  say1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "say"#) -}
10428aa950a5e08b0d21700d03821d86
  sayMetronome :: Main.Config -> GHC.Types.IO ()
  {- Arity: 1, Strictness: <S(SLS),1*U(U(U(U),A),U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Config ->
                 case w of ww { Main.Config ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 (Main.sayMetronome1 ww5 ww2 ww3)
                   `cast`
                 (Sym (GHC.Types.NTCo:IO[0] <()>_R)) } }) -}
781e0daa7fe2a8def958f80d242b479d
  sayMetronome1 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U(U)><L,U><S,U> -}
c46bae87b441871cb23a337c100b70e5
  showText :: GHC.Show.Show a => a -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S(LC(S)L),1*U(A,1*C1(U),A)><L,U>,
     Unfolding: (\ @ a4 $dShow :: GHC.Show.Show a4 eta :: a4 ->
                 case GHC.Show.show @ a4 $dShow eta of dt { DEFAULT ->
                 GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Main.showText2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Main.defaultConfig2
                      dt
                      0
                      ipv }) }) -}
3d1e22b55cc7547fca121f264d8266c3
  showText2 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
1ebeea6e28c4d4f2ffc65d0c83fd2f88
  time :: Main.Config -> (GHC.Types.Int, GHC.Types.Int)
  RecSel Main.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLS),1*U(U(U,U),A,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Config ->
                 case ds of wild { Main.Config ds1 dt ds2 -> ds1 }) -}
7f3d31a02d7a1304ef80dff40e6b638f
  timeCycle ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Types.Bool -> [Data.Text.Internal.Text]
  {- Arity: 2, Strictness: <S(SL),1*U(1*U(U),A)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (GHC.Types.Int, GHC.Types.Int) w1 :: GHC.Types.Bool ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 Main.$wtimeCycle ww4 w1 } }) -}
3b79e977de93754eb77ddc13a4661cb3
  toWord :: GHC.Types.Int -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wtoWord ww1 }) -}
instance GHC.Classes.Eq [Main.Config] = Main.$fEqConfig
instance GHC.Show.Show [Main.Config] = Main.$fShowConfig
"SPEC/Main fromList @ Text _" [ALWAYS] forall @ a4
                                              $dOrd :: GHC.Classes.Ord Data.Text.Internal.Text
  Data.Map.Base.fromList @ Data.Text.Internal.Text @ a4 $dOrd
  = Main.$sfromList @ a4
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

